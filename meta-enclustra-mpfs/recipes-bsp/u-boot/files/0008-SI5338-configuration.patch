From 2f707fca977b55e79ad9b235edd738b12220055b Mon Sep 17 00:00:00 2001
From: Andreas Buerkler <andreas.buerkler@enclustra.com>
Date: Fri, 21 Oct 2022 14:10:31 +0200
Subject: [PATCH] SI5338 configuration

---
 board/enclustra/mercury_mp1/Makefile          |   1 +
 .../mercury_mp1/enclustra_mercury_mp1.c       |   4 +
 board/enclustra/mercury_mp1/si5338_config.c   | 164 ++++++++++++++++++
 board/enclustra/mercury_mp1/si5338_config.h   |  12 ++
 4 files changed, 181 insertions(+)
 create mode 100644 board/enclustra/mercury_mp1/si5338_config.c
 create mode 100644 board/enclustra/mercury_mp1/si5338_config.h

diff --git a/board/enclustra/mercury_mp1/Makefile b/board/enclustra/mercury_mp1/Makefile
index 7fa3011740..fcf1fef18a 100644
--- a/board/enclustra/mercury_mp1/Makefile
+++ b/board/enclustra/mercury_mp1/Makefile
@@ -4,4 +4,5 @@
 # info@enclustra.com
 #
 
+obj-$(CONFIG_SI5338_CONFIGURATION)	+= si5338_config.o
 obj-y	+= enclustra_mercury_mp1.o
diff --git a/board/enclustra/mercury_mp1/enclustra_mercury_mp1.c b/board/enclustra/mercury_mp1/enclustra_mercury_mp1.c
index 7ddba65a82..5683df5f00 100644
--- a/board/enclustra/mercury_mp1/enclustra_mercury_mp1.c
+++ b/board/enclustra/mercury_mp1/enclustra_mercury_mp1.c
@@ -9,6 +9,7 @@
 #include <init.h>
 #include <asm/io.h>
 #include <enclustra/eeprom-mac.h>
+#include "si5338_config.h"
 
 #define MPFS_SYSREG_SOFT_RESET		((unsigned int *)0x20002088)
 #define PERIPH_RESET_VALUE              0x1e8
@@ -117,6 +118,9 @@ int board_early_init_f(void)
 
 int board_late_init(void)
 {
+#ifdef CONFIG_SI5338_CONFIGURATION
+	si5338_init();
+#endif
 	int ret;
 	ret = configure_mac();
 	return ret;
diff --git a/board/enclustra/mercury_mp1/si5338_config.c b/board/enclustra/mercury_mp1/si5338_config.c
new file mode 100644
index 0000000000..3875d38ae6
--- /dev/null
+++ b/board/enclustra/mercury_mp1/si5338_config.c
@@ -0,0 +1,164 @@
+// SPDX-License-Identifier: GPL-2.0+
+/*
+ * Copyright (C) 2022 Enclustra GmbH
+ * <info@enclustra.com>
+ */
+
+#include <i2c.h>
+#include <linux/delay.h>
+#include "si5338_config.h"
+#include "Si5338-RevB-Registers.h"
+
+int i2c_write_simple(struct udevice *dev, u8 addr, u8 data)
+{
+        unsigned char buf[1];
+        buf[0] = data;
+        if (dm_i2c_write(dev, addr, buf, 1) != 0) {
+                printf("SI5338 I2C write failed: %02x, %02x\n", addr, data);
+                return -1;
+        }
+        return 0;
+}
+
+int i2c_write_masked(struct udevice *dev, u8 addr, u8 data, u8 mask)
+{
+        if (mask == 0x00) return 0;
+        if (mask == 0xff) return i2c_write_simple(dev, addr, data);
+
+        unsigned char buf[1];
+        if (dm_i2c_read(dev, addr, buf, 1) != 0) {
+                printf("SI5338 I2C read failed\n");
+                return -1;
+        }
+        buf[0] &= ~mask;
+        buf[0] |= data & mask;
+        if (dm_i2c_write(dev, addr, buf, 1) != 0) {
+                printf("SI5338 I2C write failed: %02x, %02x, %02x\n", addr, data, mask);
+                return -1;
+        }
+        return 0;
+}
+
+int si5338_init(void)
+{
+        unsigned char buf[1];
+        struct udevice *dev;
+
+        if (i2c_get_chip_for_busnum(0, 0x70, 1, &dev) != 0) {
+                printf("SI5338 I2C init failed\n");
+                return -1;
+        }
+
+        if (dm_i2c_set_bus_speed(dev, 100000) != 0) {
+                printf("SI5338 I2C set speed failed\n");
+                return -1;
+        }
+
+        // set page to 0
+        if (i2c_write_simple(dev, 255, 0x00)) {
+                return -1;
+        }
+
+        // disable outputs
+        if (i2c_write_masked(dev, 230, 0x10, 0x10)) {
+                return -1;
+        }
+
+        // pause lol
+        if (i2c_write_masked(dev, 241, 0x80, 0x80)) {
+                return -1;
+        }
+
+        // write new configuration
+        for (int i=0; i<NUM_REGS_MAX; i++) {
+                if (i2c_write_masked(dev, Reg_Store[i].Reg_Addr, Reg_Store[i].Reg_Val, Reg_Store[i].Reg_Mask)) {
+                        return -1;
+                }
+        }
+
+        // validate input clock status
+        do {
+                if (dm_i2c_read(dev, 218, buf, 1) != 0) {
+                        printf("SI5338 I2C read failed\n");
+                        return -1;
+                }
+        }
+        while ((buf[0] & 0x04) != 0);
+
+        // configure PLL for locking
+        if (i2c_write_masked(dev, 49, 0, 0x80)) {
+                return -1;
+        }
+
+        // initiate locking of PLL
+        if (i2c_write_simple(dev, 246, 0x02)) {
+                return -1;
+        }
+
+        // wait 25ms (100ms to be on the safe side)
+        mdelay(100);
+
+        // restart lol
+        if (i2c_write_masked(dev, 241, 0x65, 0xff)) {
+                return -1;
+        }
+
+        // confirm PLL lock status
+        int try = 0;
+        do {
+                if (dm_i2c_read(dev, 218, buf, 1) != 0) {
+                        printf("SI5338 I2C read failed\n");
+                        return -1;
+                }
+                mdelay(100);
+                try++;
+                if (try > 10) {
+                    printf("SI5338 PLL is not locking\n");
+                    return -1;
+                }
+        }
+        while ((buf[0] & 0x15) != 0);
+
+        // copy fcal values to active registers
+        if (dm_i2c_read(dev, 237, buf, 1) != 0) {
+                printf("SI5338 I2C failed\n");
+                return -1;
+        }
+        if (i2c_write_masked(dev, 47, buf[0], 0x03)) {
+                return -1;
+        }
+
+        if (dm_i2c_read(dev, 236, buf, 1) != 0) {
+                printf("SI5338 I2C failed\n");
+                return -1;
+        }
+        if (i2c_write_masked(dev, 46, buf[0], 0xFF)) {
+                return -1;
+        }
+
+        if (dm_i2c_read(dev, 235, buf, 1) != 0) {
+                printf("SI5338 I2C failed\n");
+                return -1;
+        }
+        if (i2c_write_simple(dev, 45, buf[0])) {
+                return -1;
+        }
+
+        if (i2c_write_masked(dev, 47, 0x14, 0xFC)) {
+                return -1;
+        }
+
+        // set PLL to use FCAL values
+        if (i2c_write_masked(dev, 49, 0x80, 0x80)) {
+                return -1;
+        }
+
+        // enable outputs
+        if (i2c_write_simple(dev, 230, 0x00)) {
+                return -1;
+        }
+
+        printf("SI5338 init successful\n");
+
+        return 0;
+};
diff --git a/board/enclustra/mercury_mp1/si5338_config.h b/board/enclustra/mercury_mp1/si5338_config.h
new file mode 100644
index 0000000000..957dcd6d68
--- /dev/null
+++ b/board/enclustra/mercury_mp1/si5338_config.h
@@ -0,0 +1,12 @@
+// SPDX-License-Identifier: GPL-2.0+
+/*
+ * Copyright (C) 2022 Enclustra GmbH
+ * <info@enclustra.com>
+ */
+
+#ifndef __SI5338_INIT_H
+#define __SI5338_INIT_H
+
+int si5338_init(void);
+
+#endif
\ No newline at end of file
