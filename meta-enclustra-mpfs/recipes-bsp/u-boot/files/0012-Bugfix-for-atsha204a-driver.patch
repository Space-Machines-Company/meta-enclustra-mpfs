From 1a423f2162411ee29795dcc3b1016750b69132c9 Mon Sep 17 00:00:00 2001
From: Andreas Buerkler <andreas.buerkler@enclustra.com>
Date: Mon, 28 Feb 2022 17:52:39 +0100
Subject: [PATCH] bugfix for atsha204a driver

---
 drivers/misc/atsha204a-i2c.c | 34 +++++++++++++++++++---------------
 1 file changed, 19 insertions(+), 15 deletions(-)

diff --git a/drivers/misc/atsha204a-i2c.c b/drivers/misc/atsha204a-i2c.c
index af65c559dc..b515e797a9 100644
--- a/drivers/misc/atsha204a-i2c.c
+++ b/drivers/misc/atsha204a-i2c.c
@@ -20,7 +20,7 @@
 #include <linux/delay.h>
 #include <u-boot/crc.h>
 
-#define ATSHA204A_TWLO			60
+#define ATSHA204A_TWHI			2500
 #define ATSHA204A_TRANSACTION_TIMEOUT	100000
 #define ATSHA204A_TRANSACTION_RETRY	5
 #define ATSHA204A_EXECTIME		5000
@@ -209,7 +209,6 @@ static int atsha204a_recv_resp(struct udevice *dev,
 
 int atsha204a_wakeup(struct udevice *dev)
 {
-	u8 req[4];
 	struct atsha204a_resp resp;
 	int try, res;
 
@@ -218,19 +217,23 @@ int atsha204a_wakeup(struct udevice *dev)
 	for (try = 1; try <= 10; ++try) {
 		debug("Try %i... ", try);
 
-		memset(req, 0, 4);
-		res = atsha204a_send(dev, req, 4);
-		if (res) {
-			debug("failed on I2C send, trying again\n");
-			continue;
-		}
+		// Send 1 byte zero to wakeup the device.
+		// The I2C frequency must be below 133kHz
+		// to generate a low pulse longer than the required 60us.
+		struct i2c_msg msg;
+		msg.addr = 0;
+		msg.flags = I2C_M_STOP;
+		msg.len = 0;
+		msg.buf = NULL;
 
-		udelay(ATSHA204A_TWLO);
+		// ignore response due to missing ack
+		dm_i2c_xfer(dev, &msg, 1);
+		udelay(ATSHA204A_TWHI);
 
 		res = atsha204a_recv_resp(dev, &resp);
 		if (res) {
-			debug("failed on receiving response, ending\n");
-			return res;
+			printf("failed on receiving response\n");
+			continue;
 		}
 
 		if (resp.code != ATSHA204A_STATUS_AFTER_WAKE) {
@@ -240,10 +243,10 @@ int atsha204a_wakeup(struct udevice *dev)
 		}
 
 		debug("success\n");
-		break;
+		return 0;
 	}
 
-	return 0;
+	return -ETIMEDOUT;
 }
 
 int atsha204a_idle(struct udevice *dev)
@@ -280,6 +283,8 @@ static int atsha204a_transaction(struct udevice *dev, struct atsha204a_req *req,
 	}
 
 	do {
+		udelay(ATSHA204A_EXECTIME);
+
 		res = atsha204a_recv_resp(dev, resp);
 		if (!res || res == -EMSGSIZE || res == -EBADMSG)
 			break;
@@ -287,7 +292,6 @@ static int atsha204a_transaction(struct udevice *dev, struct atsha204a_req *req,
 		debug("ATSHA204A transaction polling for response "
 		      "(timeout = %d)\n", timeout);
 
-		udelay(ATSHA204A_EXECTIME);
 		timeout -= ATSHA204A_EXECTIME;
 	} while (timeout > 0);
 
@@ -388,7 +392,7 @@ static int atsha204a_of_to_plat(struct udevice *dev)
 	fdt_addr_t *priv = dev_get_priv(dev);
 	fdt_addr_t addr;
 
-	addr = fdtdec_get_addr(gd->fdt_blob, dev_of_offset(dev), "reg");
+	addr = fdtdec_get_addr_size_auto_noparent(gd->fdt_blob, dev_of_offset(dev), "reg", 0, NULL, false);
 	if (addr == FDT_ADDR_T_NONE) {
 		debug("Can't get ATSHA204A I2C base address\n");
 		return -ENXIO;
-- 
2.30.2

