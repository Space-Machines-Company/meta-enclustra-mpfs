From a392bec91e481f7b84d8279bbd932f6e808f4c61 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Andreas=20B=C3=BCrkler?= <andreas.buerkler@enclustra.com>
Date: Thu, 21 Jul 2022 16:44:25 +0200
Subject: [PATCH] MPFS musb glue layer update

---
 drivers/usb/musb/musb_mpfs.c | 280 ++++++++++++++---------------------
 1 file changed, 108 insertions(+), 172 deletions(-)

diff --git a/drivers/usb/musb/musb_mpfs.c b/drivers/usb/musb/musb_mpfs.c
index 23a6e43c86cd..67bb598bbb75 100644
--- a/drivers/usb/musb/musb_mpfs.c
+++ b/drivers/usb/musb/musb_mpfs.c
@@ -1,15 +1,11 @@
-// SPDX-License-Identifier: GPL-2.0+
+// SPDX-License-Identifier: GPL-2.0
 /*
- * MUSB OTG controller driver for Microchip PolarFire SoC
- *
- * Copyright 2020 Microchip
+ * Copyright (c) 2020-2022 Microchip Corporation. All rights reserved.
  *
  */
 
 #include <linux/module.h>
 #include <linux/kernel.h>
-#include <linux/sched.h>
-#include <linux/list.h>
 #include <linux/io.h>
 #include <linux/err.h>
 #include <linux/clk.h>
@@ -19,42 +15,41 @@
 #include "musb_core.h"
 #include "musb_dma.h"
 
-struct pf_glue {
-	struct device		*dev;
-	struct platform_device	*musb;
-	struct platform_device	*phy;
-	struct clk		*clk;
+struct mpfs_glue {
+	struct device *dev;
+	struct platform_device *musb;
+	struct platform_device *phy;
+	struct clk *clk;
 };
-#define glue_to_musb(g)		platform_get_drvdata(g->musb)
 
-#define PF_MUSB_MAX_EP_NUM	8
-#define PF_MUSB_RAM_BITS	12
+#define MPFS_MUSB_MAX_EP_NUM	8
+#define MPFS_MUSB_RAM_BITS	12
 
-static struct musb_fifo_cfg pf_musb_mode_cfg[] = {
+static struct musb_fifo_cfg mpfs_musb_mode_cfg[] = {
 	{ .hw_ep_num = 1, .style = FIFO_TX, .maxpacket = 512, },
 	{ .hw_ep_num = 1, .style = FIFO_RX, .maxpacket = 512, },
 	{ .hw_ep_num = 2, .style = FIFO_TX, .maxpacket = 512, },
 	{ .hw_ep_num = 2, .style = FIFO_RX, .maxpacket = 512, },
 	{ .hw_ep_num = 3, .style = FIFO_TX, .maxpacket = 512, },
 	{ .hw_ep_num = 3, .style = FIFO_RX, .maxpacket = 512, },
-	{ .hw_ep_num = 4, .style = FIFO_TX, .maxpacket = 512, },
+	{ .hw_ep_num = 4, .style = FIFO_TX, .maxpacket = 1024, },
 	{ .hw_ep_num = 4, .style = FIFO_RX, .maxpacket = 4096, },
 };
 
-static const struct musb_hdrc_config pf_musb_hdrc_config = {
-	.fifo_cfg = pf_musb_mode_cfg,
-	.fifo_cfg_size = ARRAY_SIZE(pf_musb_mode_cfg),
+static const struct musb_hdrc_config mpfs_musb_hdrc_config = {
+	.fifo_cfg = mpfs_musb_mode_cfg,
+	.fifo_cfg_size = ARRAY_SIZE(mpfs_musb_mode_cfg),
 	.multipoint = true,
 	.dyn_fifo = true,
-	.num_eps = PF_MUSB_MAX_EP_NUM,
-	.ram_bits = PF_MUSB_RAM_BITS,
+	.num_eps = MPFS_MUSB_MAX_EP_NUM,
+	.ram_bits = MPFS_MUSB_RAM_BITS,
 };
 
-static irqreturn_t polarfire_interrupt(int irq, void *__hci)
+static irqreturn_t mpfs_musb_interrupt(int irq, void *__hci)
 {
-	unsigned long	flags;
-	irqreturn_t	retval = IRQ_NONE;
-	struct musb	*musb = __hci;
+	unsigned long flags;
+	irqreturn_t ret = IRQ_NONE;
+	struct musb *musb = __hci;
 
 	spin_lock_irqsave(&musb->lock, flags);
 
@@ -66,44 +61,20 @@ static irqreturn_t polarfire_interrupt(int irq, void *__hci)
 		musb_writeb(musb->mregs, MUSB_INTRUSB, musb->int_usb);
 		musb_writew(musb->mregs, MUSB_INTRTX, musb->int_tx);
 		musb_writew(musb->mregs, MUSB_INTRRX, musb->int_rx);
-		retval = musb_interrupt(musb);
+		ret = musb_interrupt(musb);
 	}
 
 	spin_unlock_irqrestore(&musb->lock, flags);
 
-	return retval;
-}
-
-static int pf_musb_init(struct musb *musb)
-{
-	musb->xceiv = usb_get_phy(USB_PHY_TYPE_USB2);
-	if (IS_ERR(musb->xceiv)) {
-                pr_info("HS UDC: no transceiver configured\n");
-		return PTR_ERR(musb->xceiv);
-	}
-
-	musb->dyn_fifo = true;
-
-	/* Assign ISR */
-	musb->isr = polarfire_interrupt;
-
-	musb_platform_set_vbus(musb, 1);
-
-	return 0;
-}
-
-static int pf_musb_exit(struct musb *musb)
-{
-	usb_put_phy(musb->xceiv);
-
-	return 0;
+	return ret;
 }
 
-static void pf_musb_set_vbus(struct musb *musb, int is_on)
+static void mpfs_musb_set_vbus(struct musb *musb, int is_on)
 {
 	u8 devctl;
 
-	/* HDRC controls CPEN, but beware current surges during device
+	/*
+	 * HDRC controls CPEN, but beware current surges during device
 	 * connect.  They can trigger transient overcurrent conditions
 	 * that must be ignored.
 	 */
@@ -118,7 +89,8 @@ static void pf_musb_set_vbus(struct musb *musb, int is_on)
 	} else {
 		musb->is_active = 0;
 
-		/* NOTE:  we're skipping A_WAIT_VFALL -> A_IDLE and
+		/*
+		 * NOTE:  skipping A_WAIT_VFALL -> A_IDLE and
 		 * jumping right to B_IDLE...
 		 */
 		musb->xceiv->otg->default_a = 0;
@@ -135,151 +107,130 @@ static void pf_musb_set_vbus(struct musb *musb, int is_on)
 		musb_readb(musb->mregs, MUSB_DEVCTL));
 }
 
+static int mpfs_musb_init(struct musb *musb)
+{
+	struct device *dev = musb->controller;
+
+	musb->xceiv = devm_usb_get_phy(dev, USB_PHY_TYPE_USB2);
+	if (IS_ERR(musb->xceiv)) {
+		dev_err(dev, "HS UDC: no transceiver configured\n");
+		return PTR_ERR(musb->xceiv);
+	}
+
+	musb->dyn_fifo = true;
+	musb->isr = mpfs_musb_interrupt;
+
+	musb_platform_set_vbus(musb, 1);
 
-static const struct musb_platform_ops pf_ops = {
+	return 0;
+}
+
+static const struct musb_platform_ops mpfs_ops = {
 	.quirks		= MUSB_DMA_INVENTRA,
-	.init		= pf_musb_init,
-	.exit		= pf_musb_exit,
+	.init		= mpfs_musb_init,
 	.fifo_mode	= 2,
 #ifdef CONFIG_USB_INVENTRA_DMA
 	.dma_init	= musbhs_dma_controller_create,
 	.dma_exit	= musbhs_dma_controller_destroy,
 #endif
-	.set_vbus	= pf_musb_set_vbus
+	.set_vbus	= mpfs_musb_set_vbus
 };
 
-static u64 pf_dmamask = DMA_BIT_MASK(32);
-
-static int pf_probe(struct platform_device *pdev)
+static int mpfs_probe(struct platform_device *pdev)
 {
-	struct device			*dev = &pdev->dev;
-	struct resource                 musb_resources[3];
-	struct musb_hdrc_platform_data	*pdata = dev_get_platdata(&pdev->dev);
-	struct platform_device		*musb;
-	struct pf_glue		        *glue;
-	struct device_node		*np = pdev->dev.of_node;
-	const char			*mode;
-	int				strlen;
-	int				ret = -ENOMEM;
-	struct clk			*clk;
-	dev_info(&pdev->dev, "Registered MPFS MUSB driver\n");
-
-	if (!np)
-		return -ENODEV;
+	struct musb_hdrc_platform_data *pdata = dev_get_platdata(&pdev->dev);
+	struct mpfs_glue *glue;
+	struct platform_device *musb_pdev;
+	struct device *dev = &pdev->dev;
+	struct clk *clk;
+	int ret;
 
 	glue = devm_kzalloc(dev, sizeof(*glue), GFP_KERNEL);
 	if (!glue)
-		goto err0;
+		return -ENOMEM;
 
-	musb = platform_device_alloc("musb-hdrc", PLATFORM_DEVID_AUTO);
-	if (!musb) {
+	musb_pdev = platform_device_alloc("musb-hdrc", PLATFORM_DEVID_AUTO);
+	if (!musb_pdev) {
 		dev_err(dev, "failed to allocate musb device\n");
-		goto err0;
+		return -ENOMEM;
 	}
 
 	clk = devm_clk_get(&pdev->dev, NULL);
 	if (IS_ERR(clk)) {
 		dev_err(&pdev->dev, "failed to get clock\n");
 		ret = PTR_ERR(clk);
-		goto err1;
+		goto err_phy_release;
 	}
 
 	ret = clk_prepare_enable(clk);
 	if (ret) {
 		dev_err(&pdev->dev, "failed to enable clock\n");
-		goto err1;
-	}
-	
-	musb->dev.parent		= dev;
-	musb->dev.dma_mask		= &pf_dmamask;
-	musb->dev.coherent_dma_mask	= pf_dmamask;
-
-	glue->dev			= dev;
-	glue->musb			= musb;
-        glue->clk			= clk;
-        
-	if (np) {
-		pdata = devm_kzalloc(dev, sizeof(*pdata), GFP_KERNEL);
-		if (!pdata)
-			goto err1;
+		goto err_phy_release;
 	}
 
-        pdata->config = &pf_musb_hdrc_config;
-	pdata->platform_ops		= &pf_ops;
+	musb_pdev->dev.parent = dev;
+	musb_pdev->dev.coherent_dma_mask = DMA_BIT_MASK(39);
+	musb_pdev->dev.dma_mask = &musb_pdev->dev.coherent_dma_mask;
 
-	mode = of_get_property(np, "dr_mode", &strlen);
-	if (!mode) {
-		dev_err(dev, "No 'dr_mode' property found\n");
-		return 0;
-	}
-
-	if (strlen > 0) {
-		if (!strcmp(mode, "host"))
-			pdata->mode = MUSB_HOST;
-		if (!strcmp(mode, "otg"))
-			pdata->mode = MUSB_OTG;
-		if (!strcmp(mode, "peripheral"))
-			pdata->mode = MUSB_PERIPHERAL;
-	}
+	glue->dev = dev;
+	glue->musb = musb_pdev;
+	glue->clk = clk;
 
-	/* register a nop PHY */
-	usb_phy_generic_register();
+	pdata = devm_kzalloc(dev, sizeof(*pdata), GFP_KERNEL);
+	if (!pdata)
+		goto err_clk_disable;
 
-	platform_set_drvdata(pdev, glue);
+	pdata->config = &mpfs_musb_hdrc_config;
+	pdata->platform_ops = &mpfs_ops;
 
-	memset(musb_resources, 0x00,
-		sizeof(*musb_resources) * ARRAY_SIZE(musb_resources));
-
-	musb_resources[0].name  = pdev->resource[0].name;
-	musb_resources[0].start = pdev->resource[0].start;
-	musb_resources[0].end   = pdev->resource[0].end;
-	musb_resources[0].flags = pdev->resource[0].flags;
+	pdata->mode = usb_get_dr_mode(dev);
+	if (pdata->mode == USB_DR_MODE_UNKNOWN) {
+		dev_info(dev, "No dr_mode property found, defaulting to otg\n");
+		pdata->mode = USB_DR_MODE_OTG;
+	}
 
-	musb_resources[1].name  = pdev->resource[1].name;
-	musb_resources[1].start = pdev->resource[1].start;
-	musb_resources[1].end   = pdev->resource[1].end;
-	musb_resources[1].flags = pdev->resource[1].flags;
+	glue->phy = usb_phy_generic_register();
+	if (IS_ERR(glue->phy)) {
+		dev_err(dev, "failed to register usb-phy %ld\n",
+			PTR_ERR(glue->phy));
+		goto err_clk_disable;
+	}
 
-	musb_resources[2].name  = pdev->resource[2].name;
-	musb_resources[2].start = pdev->resource[2].start;
-	musb_resources[2].end   = pdev->resource[2].end;
-	musb_resources[2].flags = pdev->resource[2].flags;
+	platform_set_drvdata(pdev, glue);
 
-	ret = platform_device_add_resources(musb, musb_resources,
-		ARRAY_SIZE(musb_resources));
+	ret = platform_device_add_resources(musb_pdev, pdev->resource, pdev->num_resources);
 	if (ret) {
 		dev_err(dev, "failed to add resources\n");
-		goto err2;
+		goto err_clk_disable;
 	}
 
-	ret = platform_device_add_data(musb, pdata, sizeof(*pdata));
+	ret = platform_device_add_data(musb_pdev, pdata, sizeof(*pdata));
 	if (ret) {
 		dev_err(dev, "failed to add platform_data\n");
-		goto err2;
+		goto err_clk_disable;
 	}
 
-
-	ret = platform_device_add(musb);
+	ret = platform_device_add(musb_pdev);
 	if (ret) {
 		dev_err(dev, "failed to register musb device\n");
-		goto err2;
+		goto err_clk_disable;
 	}
 
+	dev_info(&pdev->dev, "Registered MPFS MUSB driver\n");
 	return 0;
-err2:
+
+err_clk_disable:
 	clk_disable_unprepare(clk);
 
-err1:
+err_phy_release:
 	usb_phy_generic_unregister(glue->phy);
-	platform_device_put(musb);
-
-err0:
+	platform_device_put(musb_pdev);
 	return ret;
 }
 
-static int pf_remove(struct platform_device *pdev)
+static int mpfs_remove(struct platform_device *pdev)
 {
-	struct pf_glue	*glue = platform_get_drvdata(pdev);
+	struct mpfs_glue *glue = platform_get_drvdata(pdev);
 
 	platform_device_unregister(glue->musb);
 	usb_phy_generic_unregister(pdev);
@@ -287,39 +238,24 @@ static int pf_remove(struct platform_device *pdev)
 	return 0;
 }
 
-static int pf_suspend(struct device *dev)
-{
-	return 0; 
-}
-
-static int pf_resume(struct device *dev)
-{
-	return 0;
-}
-
-
-static SIMPLE_DEV_PM_OPS(pf_pm_ops, pf_suspend, pf_resume);
-
-#ifdef IS_ENABLED(CONFIG_OF)
-static const struct of_device_id pf_id_table[] = {
-	{ .compatible = "microchip,mpfs-usb-host" },
+#ifdef CONFIG_OF
+static const struct of_device_id mpfs_id_table[] = {
+	{ .compatible = "microchip,mpfs-usb-host" },
 	{ }
 };
-MODULE_DEVICE_TABLE(of, pf_id_table);
+MODULE_DEVICE_TABLE(of, mpfs_id_table);
 #endif
 
-static struct platform_driver microchip_musb_driver = {
-	.probe		= pf_probe,
-	.remove		= pf_remove,
-	.driver		= {
-		.name	= "microchip-musb",
-		.pm = &pf_pm_ops,
-		.of_match_table = of_match_ptr(pf_id_table)
+static struct platform_driver mpfs_musb_driver = {
+	.probe = mpfs_probe,
+	.remove = mpfs_remove,
+	.driver = {
+		.name = "mpfs-musb",
+		.of_match_table = of_match_ptr(mpfs_id_table)
 	},
 };
 
-module_platform_driver(microchip_musb_driver);
+module_platform_driver(mpfs_musb_driver);
 
 MODULE_DESCRIPTION("PolarFire SoC MUSB Glue Layer");
-MODULE_AUTHOR("Sagar Khadgi <sagar.khadgi@microchip.com>");
-MODULE_LICENSE("GPL v2");
+MODULE_LICENSE("GPL");
\ No newline at end of file
-- 
2.25.1

